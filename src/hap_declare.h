/*Properly per K&R this is a file of definitions not declarations--but "declarations" is more intuitive to me*//* globals: *//*  DEFINES changed TO GLOBAL, for gui version: */extern int INCLUDE_PHENOTYPE; //1extern int INDIV_HAP_OUTPUT; //1extern int INDIV_DIP_OUTPUT; //1extern int INDIV_HAP_DBFORMAT; //0extern int SASCODE; //0extern int LD_TABLE; //0 /* here could have submenu choosing which LD statistics to compute */extern int FULL_DISEQ_TABLE;extern int CALC_BEST_LD_VALUES;extern int USE_BOOTSTRAP_LD;extern int BIOPERL_LDFILE;extern int CALC_SUBHAP_ENT;// 0extern int CALC_PREDICTED_FRACTION;// 0extern int COUNT_MISSINGS_IN_PF;//extern int SCAN_INFOFILE;// 1 /* use an info file for scan input, REPLACE PARAM BY USER CHOICE */extern int locusinfo_available;/* parameters for random genotype test  ( removed 6/05) and bootstrap test */extern int CALC_HAP_CALL_ENT;// 1extern float MIN_HAP_IN_SUB_FREQ; // 0.00001 /* minimum frequency of hap that we will consider in assem*/extern float MIN_SUBHAP_RELFREQ; // 0.00000001 /* need small; dropped subhaps give underestimation of HCE, inconsistency with fullhap calc */extern int MAX_SIMGTS;// 1000extern int PRT_RANDGT_TBLS; // 0// CEPH stuff (new)extern int ORDERED_GTS;// 0;// parameters for use of missing data:extern float MAX_LOCUS_MISSINGFRAC;extern float MAX_MISSINGFRAC_INFER;extern float MAX_MISSINGFRAC_OUTPUT;extern float MAX_LOCUSINDIVMISSING;/* OUTPUT PARAMETERS (new) */extern int PRINT_BOOTHAP_OUTPUT; // 0extern float SASROUND;// .01extern int PRINTSASROUNDFRAC;// 1extern int KMROUNDING;// 1extern float MINPRINTCT;// 0.001extern float SMALL_PRNT_LIMIT;// 0.0005 /* if smaller we are printing haps with "0.000" count. */extern float INDIVPRINT_SMALL_LIMIT;// 0.01 extern float HAPOUTPUT_COUNT_LIMIT;// 0.01 extern float INDIVPRINT_ASSUME_REAL;// 0.90extern float ARG_CERTAINTY;// 0.90extern int MIN_ARGOUT_PRINTCT;// 30 extern int MIN_DBOUT_COUNT;// 4 /* for database format output, for ARG kernel, only give hap vbls with enough to analyse */extern int PRINTDIP_MINCOUNT;// 1 extern int PRINTDUPS;// 0extern int OUTPUT_LD_TABLE;// 1// to pass best LD values from hapoutputs to grokblokextern float trapdoor_D, trapdoor_Dprime, trapdoor_R2;extern int CALC_W;// parameters for diagonal search and outputting "output batch settings" file extern int CHECK_ANALHAP_PERCENT; // check percent of count represented by haps frequent enough for association analysis extern int MIN_ANALYSIS_CT; // guess at count of haps needed for useful association analysis extern float PUSHDIAG_HCE_LIMIT; extern float PUSHDIAG_BOOTENTROPY_LIMIT; extern long int TIPVISIT_LIMIT; extern int PUSHDIAG_SUM_LIMIT; extern float PUSHDIAG_ANALHAP_LIMIT; extern int OUTPUT_OUTBATCHFILE; extern int CHOOSE_BLOCKS; extern int BREAK_OVERLAPPING_BLOCKS; extern float OUTBATCHFILE_HCE_LIMIT; // if >= to sum, sum is criterion... extern float OUTBATCHFILE_BOOTENTROPY_LIMIT; // if >= to sum, sum is criterion... extern float OUTBATCHFILE_ANALHAP_LIMIT;/* parameters for random start searches */ extern int RANSRCHS; /* 12/10/03 now number of searches is RANSRCHS + 1; currently should stay 0, random search output not used!*/ extern float UNIFORM; extern float RANDOMDIST;// extern long IDUMCALL = -231;/* misc. */ extern int LOCUS_HW_TEST; extern int LOCUS_ZERO;//parameters for consistency method extern float MIN_SIGHAP_CT; extern int MAX_N_SUPPGTYPES;// for inputextern char infile_type, indivfile_fmt, infile_sas;extern char cohort[10];extern int raceUsed; extern char mode, method;extern struct output_spec *testoutspec, **batch_outspec;extern int batchmode, batch_n, chromosome;extern int inferred_from_loc1, inferred_from_loc2, inferred_loc1, inferred_loc2;extern char gtfilename[FILENAMELENGTH];extern struct NRfunc_passer func_structs;extern char (*locus)[LOCUS_NAMELENGTH]; /* only used for results output */extern long int *locusposition; // REPLACE THIS AND locus BY OBVIOUS STRUCTextern struct allele_namect **allele_list;extern int *n_alleles;extern int *pos_hap_vctr;extern double **allele_freq;extern double **inferred_allele_freq;/*extern int *hapvector;*/extern int *dummyhapvector;extern double (**p2locus)[4];extern double (**f2loci);extern int f2loc1, f2loc2;/* move these to #else when testmode is set up for n_gtypes */extern char (**gtypes)[GT_STRINGLENGTH];extern int *gtcount_read;extern double test_count;extern double this_totoldcount, this_totprodcount, this_totprodcount_rl, this_sqrttotprodct, equil_totprodct;/* run-time parameters (former defs) */extern int accept_params; /* default is to let the user decide to accept the parameters from the file */extern int mode_int; /* default mode is test */extern int blockSeqInt; extern int disease_dat;/* parameters for search for maximum */extern float target_delta;extern int max_iterations;extern int sum_gt_haps; // sum # haps for each gtypeextern float iterations_sum;/* parameters for block search */extern int full_hap_call; extern int subseq_hap_call; extern char blocksequence;extern int **pushdiag; // nloci x nloci matrix storing decision of whether to infer k, kk subblockextern int max_subblock;  extern int max_subdiag;  /* output choices: for now output all*//* randomized genotypes for comparing HCE */extern int calc_hap_call_entropy;extern int n_sim_gtsets;extern int n_bootstrap_reps;  // special situations:extern int monosomes;extern float **mb_haps;/* parameters for output mode */extern int inferred_from_start; /* start of gt subblock from which output haps are inferred */extern int hap_start; /* start of gt subblock for which output haps are inferred */extern int hap_end; /* end of gt subblock for which output haps are inferred */extern int inferred_from_end; /* end of gt subblock from which output haps are inferred */extern double bicon_factor;extern char indiv_name[MAX_N_INDIVS][INDIV_NAMELENGTH]; /* maybe redundant to data in struct ind_gtype*/extern int n_gtypes,  thisgtct,  indiv_ct;//extern long tot_n_haps; extern int gt_hapcount;extern float tothapcount; // for mc method, total count can get wrong, add up and normalizeextern int indivdata;extern int sas_inp;extern double chromctsqr;extern int *subgtype; /*extern int abshapcount[N_ALLELES_1][N_ALLELES_2];extern double oldhapcount[N_ALLELES_1][N_ALLELES_2];extern double  hapcounts[N_ALLELES_1][N_ALLELES_2];extern double hapfreq[N_ALLELES_1][N_ALLELES_2];*/extern double this_totoldcount, this_totprodcount, equil_totprodct;extern double sumdelta, oldsumdelta;extern float bootdiff;extern double totloglike;// variables for indexing haps, and generating unseen genotypesextern float analhapcount, hap1count;extern int n_sig_haps;extern int **sig_hap_list;extern float *sig_hap_count;extern float *index_cts;extern float *hap_freq;extern unsigned long *hap_rank;extern unsigned long *hap_index; extern int linhapctr; /* counts down the haps for each gt for linear run */extern int sequence;extern int indiv_dip_ct;extern int tot_n_loci, max_n_gtypes;extern int (*comphap_vector)[2];extern double comphapfreq, comphapct; /* which will be used ?*/extern double this_hap_ent, this_equil_ent;extern long idum;extern int indiv_dip[2];extern int indiv_has_hap[2];extern char hapgraphic[30][120];extern char dipgraphic[30][60];extern enum token_status sighaptoken_status;/*these are global to make the bestScore function work*///extern float **ld_data;//extern float **D;extern float **pct_hce_matrix, **best_hce,  **analhap_pct_matrix, **bootmean_entropy_matrix, **MI_matrix, **hap1_freq_matrix;extern float **best_D, **best_Dprime, **best_R2; //D, Dprime, R squared LD valuesextern int **best_hce_length;extern float bestScoreEntropy;/*extern struct hapnode *firstnode_ptr;  TOSS */extern struct ind_gtype *firstind;// globals for special tests:extern double dithrdhapsum;extern struct all_gtypes_haps *gtype_hapdata; // better to pass this as param; attach to another struct?//for inputextern char loc_infofilename[32];extern FILE *jobnames, *enzfile, *geldata, *indivfile, *indivfile2, 	*output, *hap_test_log, *HapRunLog, *summary, *haplotype_log, *hap_special_log, *paramfile, 	*hapgraf, *sascode, *kmcode, *newhapgraf, *ldtable, *indivout,	*indiv_dbfmt, *subhaptbl, *arghapout, *arghapdata, *argblockdata,	*bestScoreFile, *hapmatrices;extern FILE *thisoutput; // to pass different files for hapscans (maybe other) output// for GS_functions; trying to fix link error//extern struct GS_coeffs_str GS_coeffs;